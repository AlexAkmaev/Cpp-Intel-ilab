%require "3.0"
%language "c++"


%defines
%define parser_class_name {ParaCL_Parser}
%define api.value.type variant
%define api.location.type {unsigned}

%param {yy::ParaCL_Driver* driver}

%skeleton "lalr1.cc"


%code requires
{
    #include <iostream>
    #include <algorithm>
    #include <string>
    #include "nodes.hpp"

    #define CUR_BLOCK driver->cur_block

    namespace yy {
        class ParaCL_Driver;
    }

    #define YYLLOC_DEFAULT(Cur, Rhs, N)  \
    if (N) {                             \
      (Cur)=YYRHSLOC(Rhs,1);             \
    } else {                             \
      (Cur)=YYRHSLOC(Rhs,0);             \
    }

}


%code
{
#include "ParaCL_Driver.hpp"

    namespace yy {
        ParaCL_Parser::token_type yylex
        (ParaCL_Parser::semantic_type* yylval, ParaCL_Parser::location_type* yylloc,
        ParaCL_Driver* driver);
    }

}


%token
    WHILE
    IF
    ELSE
    PRINT
    LESS_EQ
    GRT_EQ
    AND
    OR
    NOT_EQUAL
    EQUAL
    ERROR
;

%token<int> NUMBER
%token<std::string> ID
%type<Oper_t*> OPS OP1 OP2 OP PROGRAM
%type<Oper_t*> if_scope while_scope1 while_scope2
%type<Expr_t*> if_expr while_expr
%type<Expr_t*> EXPR EXPR1 EXPR2 EXPR_L TERM VAL


%left OR
%left AND

%left
  EQUAL
  NOT_EQUAL
;

%left
  '<'
  LESS_EQ
  '>'
  GRT_EQ
;

%left '+' '-'
%left '*' '/'



%%

%start PROGRAM;

PROGRAM: OPS                            {
                                            $$ = $1;
                                            $1->Evaluate();
                                            //$1->print();
                                            delete $1;
                                        }
;

OPS:    OP                              { CUR_BLOCK->append($1); $$ = CUR_BLOCK; }
|       OPS OP                          { CUR_BLOCK->append($2); $$ = CUR_BLOCK; }
;

OP1:    '{' OPS '}'                     { $$ = $2; }
|       EXPR ';'                        { $$ = new Exprop($1); }
|       PRINT EXPR ';'                  { $$ = new Printop($2); }
|       while_scope1                    {
                                          $$ = $1;
                                          CUR_BLOCK = CUR_BLOCK->prev_block;
                                        }
;

OP2:    if_scope                        {
                                          $$ = $1;
                                          CUR_BLOCK = CUR_BLOCK->prev_block;
                                        }
|       while_scope2                    {
                                          $$ = $1;
                                          CUR_BLOCK = CUR_BLOCK->prev_block;
                                        }
;



OP:     OP1                             { $$ = $1; }
|       OP2                             { $$ = $1; }
;


EXPR:   EXPR_L                          { $$ = $1; }
|       ID '=' EXPR                     { $$ = new Assign($1, $3, CUR_BLOCK); }
|       ID '=' '?'                      { $$ = new Scanfop($1, CUR_BLOCK); }
;

EXPR_L : EXPR1                          { $$ = $1; }
|       EXPR_L OR EXPR1                 { $$ = new Binary_expr("||", $1, $3); }
|       EXPR_L AND EXPR1                { $$ = new Binary_expr("&&", $1, $3); }
;

EXPR1:  EXPR2                           { $$ = $1; }
|       EXPR1 EQUAL EXPR2               { $$ = new Binary_expr("==", $1, $3); }
|       EXPR1 LESS_EQ EXPR2             { $$ = new Binary_expr("<=", $1, $3); }
|       EXPR1 GRT_EQ EXPR2              { $$ = new Binary_expr(">=", $1, $3); }
|       EXPR1 NOT_EQUAL EXPR2           { $$ = new Binary_expr("!=", $1, $3); }
|       EXPR1 '>' EXPR2                 { $$ = new Binary_expr(">", $1, $3); }
|       EXPR1 '<' EXPR2                 { $$ = new Binary_expr("<", $1, $3); }
;

EXPR2:  TERM                            { $$ = $1; }
|       EXPR2 '+' TERM                  { $$ = new Binary_expr("+", $1, $3); }
|       EXPR2 '-' TERM                  { $$ = new Binary_expr("-", $1, $3); }
;

TERM:   VAL                             { $$ = $1; }
|       TERM '*' VAL                    { $$ = new Binary_expr("*", $1, $3); }
|       TERM '/' VAL                    { $$ = new Binary_expr("/", $1, $3); }
;

VAL:    NUMBER                          { $$ = new Number($1); }
|       '-' VAL                         { $$ = new Unary_expr("-", $2); }
|       '!' VAL                         { $$ = new Unary_expr("!", $2); }
|       '(' EXPR ')'                    { $$ = $2; @1;}
|       ERROR                           { error(@1, "Unknown symbol. Terminate"); }
|       ID                              { $$ = new Value($1, CUR_BLOCK, @1); }
;

if_scope:    if_expr OP1                {
                                           $$ = new Ifop($1, CUR_BLOCK, new Block(CUR_BLOCK->prev_block));
                                        }
;

if_expr: IF '(' EXPR ')'                {
                                          CUR_BLOCK = new Block(CUR_BLOCK);
                                          $$ = $3;
                                        }
;

while_scope1:   while_expr OP1           {
                                           CUR_BLOCK->append($2);
                                           $$ = new Whileop($1, CUR_BLOCK);
                                        }
;

while_scope2:   while_expr OP2          {
                                           $$ = new Whileop($1, CUR_BLOCK);
                                        }
;

while_expr: WHILE '(' EXPR ')'          {
                                          CUR_BLOCK = new Block(CUR_BLOCK);
                                          $$ = $3;
                                        }
;

%%

namespace yy {

    ParaCL_Parser::token_type yylex(ParaCL_Parser::semantic_type* yylval, ParaCL_Parser::location_type* yylloc,
                             ParaCL_Driver* driver) {
      return driver->yylex(yylval, yylloc);
    }

    void ParaCL_Parser::error(const location_type& lloc, const std::string& message){
      std::cerr << "Error. Line:" << lloc << ": " << message << "\n";
      exit(1);
    }

}
